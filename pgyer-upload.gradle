import groovy.json.JsonSlurper
import groovy.json.JsonOutput

ext.uploadApk = this.&uploadApk
ext.outPutUpgradeInfo = this.&outPutUpgradeInfo
// 需要@人的手机号码
static def getMobileList() {
    return ["12345698789"]
}
// 机器人的地址
static def weChatUrl() {
    return "https://oapi.dingtalk.com/robot/send?access_token=e5baefc2bf87dd503b766661a9287a74788c10536d3ae140672383fbab26936b"
}
// 是否需要开启机器人通知
static def isOpenWeChatNotify() {
    return true
}
// 打包蒲公英的描述
static def pgyerUpdateDescription() {
    return "App introduce"
}

/**
 * 上传 apk 到蒲公英
 */
def uploadApk(File apk,boolean release = false,boolean isNeice = false) {
    if (apk == null) {
        throw new RuntimeException("apk file not exists!")
    }
    println "*************** start upload ${apk.size()}***************"
    //加载资源
    def twoHyphens = "--"
    def boundary = "*********"
    def end = "\r\n"
    // 模拟表单上传 multipart/form-data
    def conn = new URL("https://www.pgyer.com/apiv2/app/upload").openConnection()
    conn.setRequestMethod('POST')
    conn.setRequestProperty("Connection", "Keep-Alive")
    conn.setRequestProperty("Charset", "UTF-8")
    conn.setRequestProperty("Content-Type", "multipart/form-data;charset=UTF-8; boundary=" + boundary)
    conn.setDoInput(true)
    conn.setDoOutput(true)
    // 添加参数:_api_key
    def _api_key="0de8c752680931616de43f50ef259904";

    if(release){
        if(isNeice){ //内测包
            _api_key = "98d450e72f36c673334878966345e200"
        }else {
            _api_key = "5a22a44dd9f38d24a052c474c309ec52"
        }

    }
    def sb = new StringBuilder()
    sb.append(twoHyphens).append(boundary).append(end)
    sb.append("Content-Disposition: form-data; name=_api_key")
    sb.append(end).append(end)
    sb.append(_api_key).append(end)
    sb.append(twoHyphens).append(boundary).append(end)
    sb.append("Content-Disposition: form-data; name=buildUpdateDescription")
    sb.append(end).append(end)
    sb.append(pgyerUpdateDescription()).append(end)
    // 添加参数 file: 需要上传的 apk 文件
    sb.append(twoHyphens).append(boundary).append(end)
    sb.append("Content-Disposition: form-data; name=file;filename=").append(apk.getName())
    sb.append(end).append(end)
    def dos = new DataOutputStream(conn.getOutputStream())
    dos.write(sb.toString().getBytes("UTF-8"))
    dos.flush()
    println sb.toString()
    sb.delete(0, sb.length())
    def fis = new FileInputStream(apk)
    byte[] bf = new byte[8192]
    int len
    while ((len = fis.read(bf)) != -1) {
        dos.write(bf, 0, len)
    }
    sb.append(end)
    sb.append(twoHyphens).append(boundary).append(end)
    dos.writeBytes(sb.toString())
    dos.flush()
    fis.close()
    dos.close()
    conn.connect()
    def text = conn.getContent().text
    def resp = new JsonSlurper().parseText(text)
    println text
    println "*************** upload finish ${apk.size()}  ${resp.code} ***************"
    println "*************** qrCodeUrl ${resp.data.buildQRCodeURL}  build ${resp.data.buildBuildVersion} ***************"
    if (resp.code != 0) {
        println "*************** respcode ${resp.code}  respmessage ${resp.message} ***************"
        throw new RuntimeException(resp.message)
    }
    if (isOpenWeChatNotify()) {
//        sendMsgToWeChat("android App\nbuildCode ${resp.data.buildBuildVersion}\nqrCodeUrl ${resp.data.buildQRCodeURL}")
        sendMsgToWeChat("android App update\nbuildCode ${resp.data.buildBuildVersion}\nqrCodeUrl ${resp.data.buildQRCodeURL}")
    }
}

def sendMsgToWeChat(def data) {
    def conn = new URL(weChatUrl()).openConnection()
    conn.setRequestMethod('POST')
    conn.setRequestProperty("Connection", "Keep-Alive")
    conn.setRequestProperty("Content-type", "application/json;charset=UTF-8")
    conn.setConnectTimeout(30000)
    conn.setReadTimeout(30000)
    conn.setDoInput(true)
    conn.setDoOutput(true)
    def content = "{\n" +
            "    \"msgtype\": \"text\",\n" +
            "    \"text\": {\n" +
            "        \"content\": \"$data\"" +
            "        ,\"mentioned_mobile_list\":${getMobileList().toString()}" +
            "    }\n" +
            "}"
    conn.setRequestProperty("Content-Length", String.valueOf(content.length()));
    def dos = new DataOutputStream(conn.getOutputStream())
    dos.write(content.toString().getBytes("UTF-8"))
    println content
    dos.flush()
    dos.close()
    conn.connect()
    def result = conn.getContent().text
    println(result)
}

def fileToMd5(File aFile) {
    def digest = java.security.MessageDigest.getInstance("MD5");
    aFile.withInputStream { inpStream ->
        byte[] buffer = new byte[8192];
        int read = 0
        while ((read = inpStream.read(buffer)) > 0) {
            digest.update(buffer, 0, read);
        }
    }
    byte[] md5sumByteArray = digest.digest();
    def bigInt = new BigInteger(1, md5sumByteArray);
    return bigInt.toString(16).padLeft(32, '0');
}

/**
 * 输出升级版本升级信息
 * @return
 */
def outPutUpgradeInfo(){
    def testUpgradeFile = file("${project.rootDir}/outputs/upgradeInfo.txt")
    if (!testUpgradeFile.exists()) {
        testUpgradeFile.createNewFile()
    }

    def outputFiles = file("../outputs/release")

    def map = [channel_msg: '', version_code: '']


    def channelArr = []


    if (outputFiles.exists()) {
        println "outputfile path: ${outputFiles.absolutePath}"
        outputFiles.eachFile { File file ->
            if (file != null && file.exists() && file.name.endsWith(".apk")) {
                def channelMap = [apk_md5: '', app_url: '', channel: '']
                channelMap.apk_md5 = fileToMd5(file)
                channelMap.app_url = "https://static.learning.mil.cn/ucloud/moocnd/app/${file.name}"
                def channel = file.name.split("_")[1].toLowerCase()
                if (channel == "qh360") {
                    channel = "qu360"
                }
                channelMap.channel = channel

                map.app_size = "${Math.round(file.length() / 1024 / 1024 * 100) / 100}"
                channelArr.add(channelMap)
            }
        }
    }
    map.channel_msg = channelArr
    map.version_code = rootProject.ext.android.versionCode
    map.version_name = rootProject.ext.android.versionName

    def updateJson = JsonOutput.toJson(map)
    testUpgradeFile.withWriter { writer ->
        writer.write(JsonOutput.prettyPrint(updateJson))
    }
}

task upgradeInfoOutput{
    group 'other'
    description "Custom task for outputUpgradeInfo"
    //生成版本升级信息
    doLast{
        outPutUpgradeInfo()
    }
}

